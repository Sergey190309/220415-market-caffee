# ========================================================
# Modernisation from previous version based on
# https://medium.com/swlh/dockerizing-a-react-application-with-docker-and-nginx-19e88ef8e99a
### STAGE 1: coping ###
FROM node:alpine AS build
# FROM node:17.3.0-buster-slim as coping

# RUN mkdir /usr/src/app
WORKDIR /app


# ENV NODE_OPTIONS=--openssl-legacy-provider

COPY . /app
ENV PATH /app/node_modules/.bin:$PATH
# COPY yarn.lock /app
# COPY .bashrc /app
RUN cat .bashrc >> /root/.bashrc

RUN yarn

RUN yarn build

# CMD [ "yarn", "start" ]
# FROM build as builded

FROM nginx:1.21.6 AS deployment

COPY --from=build:latest /app/build /usr/share/nginx/html
# I took the image already built using staged building. Do not foreget it do it!
RUN rm /etc/nginx/nginx.conf \
    && rm /etc/nginx/conf.d/default.conf
    # && ln -sf /dev/stdout /var/log/nginx/access.log \
    # && ln -sf /dev/stderr /var/log/nginx/error.log
COPY ./nginx.conf /etc/nginx
COPY ./web.conf /etc/nginx/conf.d
VOLUME [ "/var/log/nginx", "/etc/nginx" ]
# COPY ./nginx/nginx.conf /etc/nginx/conf.d
EXPOSE 80 443
CMD [ "nginx", "-g", "daemon off;" ]
# =======================================>
# d build  --target coping -t front_coping .
# d run -it --name .... image /bin/bash
# d run --rm -it -p 8080:80 front_production
# It works.
