# ========================================================
# Modernisation from previous version based on
# https://typeofnan.dev/how-to-serve-a-react-app-with-nginx-in-docker/
### STAGE 1: coping ###
FROM node:17.3.0-buster-slim as coping

RUN mkdir /usr/src/app
WORKDIR /usr/src/app


ENV PATH /usr/src/app/node_modules/.bin:$PATH
# ENV NODE_OPTIONS=--openssl-legacy-provider

COPY package.json /usr/src/app
COPY .bashrc /usr/src/app
RUN cat .bashrc >> /root/.bashrc

# ========================================================
### STAGE 2: instalation ###
FROM coping as installation

RUN yarn install
# RUN yarn install --silent
# RUN yarn add react-scripts -g
# RUN yarn add react-scripts -g --silent

# ========================================================
### STAGE 3: build ###
FROM installation as build
COPY . /usr/src/app
# ENV NODE_OPTIONS=--openssl-legacy-provider
RUN yarn build

# ========================================================
### STAGE 4: Production Environment ###
FROM nginx:alpine as production
# Set working directory to nginx asset directory
WORKDIR /usr/share/nginx/html
# Remove default nginx static assets
RUN rm -rf ./*
# Copy static assets from builder stage
COPY --from=build /usr/src/app/build .
# COPY --from=build /usr/src/app/build  /usr/share/nginx/html
# EXPOSE 80
ENTRYPOINT [ "nginx", "-g", "daemon off;"]


# =======================================>
# d build  --target coping -t front_coping .
# d run -it --name .... image /bin/bash
# d run --rm -it -p 8080:80 front_production
# It works.
